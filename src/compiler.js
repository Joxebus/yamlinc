/*!
 * Yamlinc: v0.2.0
 * Copyright(c) 2016-2019 Javanile
 * MIT Licensed
 */

const fs = require('fs')
    , mkdirp = require('mkdirp').sync
    , dirname = require('path').dirname
    , yamljs = require('js-yaml')
    , EOL = require('os').EOL
    , resolver = require('./resolver')
    , helpers = require('./helpers')

/**
 * Compile yaml file.
 *
 * @param file
 * @param incFile
 * @param callback
 * @returns {*}
 */
module.exports = {

    /**
     *
     * @param tag
     */
    setTag: function(tag) {
        resolver.setTag(tag)
    },

    /**
     * Compile file and save it on
     * @param file
     * @param incFile
     * @param callback
     * @returns {*}
     */
    parse: function (files, cb) {
        if (!helpers.fileExists(files.input)) {
            return helpers.error('Problem', `file '${files.input}' not found.`, cb);
        }

        // Compile and prepare disclaimer
        helpers.info('Analize', files.input)
        let object = resolver.parse(files.input)
        let disclaimer = [
            '## ---------------------',
            '## DO NOT EDIT THIS FILE',
            '## ---------------------',
            '## Engine: ' + helpers.getVersion(),
            '## Source: ' + files.input,
        ];

        // Print-out compiled code into file
        helpers.done('Compile', files.output);
        let code = object ? yamljs.safeDump(object) : 'empty: true' + EOL
        let data = disclaimer.join(EOL) + EOL + EOL + code

        if (files.output != '-') {
            mkdirp(dirname(files.output));
            fs.writeFileSync(files.output, data);
        } else {
            process.stdout.write(data);
        }

        // Trigger debugger callback
        return helpers.isFunction(cb) && cb(files)
    }
}
